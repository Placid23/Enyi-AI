
// This is an autogenerated file from Firebase Studio.
// Please do not edit this file manually.
'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import Link from 'next/link';
import { useRouter } from 'next/navigation'; 
import { Loader2, ShieldCheck, Fingerprint, AlertTriangle } from 'lucide-react'; 
import { Checkbox } from '@/components/ui/checkbox';
import { Separator } from '@/components/ui/separator';
import { useAuth } from '@/context/auth-context'; // Import useAuth

// Inline SVG for Google Logo
const GoogleLogo = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20px" height="20px" className="mr-2">
    <path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24s8.955,20,20,20s20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"/>
    <path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"/>
    <path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"/>
    <path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.574l0.002-0.002l6.19,5.238C39.708,34.066,44,28.866,44,24C44,22.659,43.862,21.35,43.611,20.083z"/>
  </svg>
);

// Inline SVG for Apple Logo
const AppleLogo = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" className="mr-2 bi bi-apple" viewBox="0 0 16 16">
    <path d="M11.182.008C10.148-.03 9.072.038 8.09.213c-.988.176-1.902.52-2.724.993C3.478 2.09 2.31 3.804.963 6.06c-1.328 2.222-.77 5.244 1.286 6.932 1.01.833 2.237 1.253 3.532 1.216.12.004.24-.004.362-.008.904-.03 1.796-.22 2.592-.538.797-.317 1.49-.744 2.088-1.254.996-.848 1.774-2.134 1.774-3.638 0-1.27-.62-2.34-1.646-3.03-.863-.578-1.938-.86-3.23-.81C7.65 6.215 7.006 7.05 7.006 8.043c0 .992.674 1.78 1.538 1.78.865 0 1.562-.788 1.562-1.78 0-.096.012-.18.035-.27C10.627 7.008 11.33 6.2 12.13 5.414c.304-.304.62-.592.952-.862.333-.27.68-.505 1.04-.698.805-.43 1.743-.598 2.6-.568.048.004.095.01.143.018-.005 2.39-.97 4.785-2.634 6.43-.95 1.01-2.11 1.648-3.39 1.913-.21.043-.424.076-.64.098a1.75 1.75 0 0 1-.222.02c-.868.05-1.71-.12-2.432-.438-.72-.317-1.344-.764-1.846-1.298-.776-.832-1.208-1.96-.908-3.186.206-.848.732-1.575 1.375-2.135.643-.56 1.383-.965 2.213-1.15a6.707 6.707 0 0 1 .43-.062C9.89-.032 10.58.008 11.182.008"/>
    <path d="M10.86 3.756c.252-.28.545-.526.865-.73.256-.164.488-.312.692-.448.203-.136.378-.26.523-.368.144-.108.264-.2.354-.28C13.45 1.87 13.3 1.71 13.134 1.58c-.16-.128-.33-.24-.508-.335a5.08 5.08 0 0 0-.81-.355c-.318-.1-.64-.148-.964-.17-.326-.02-.654-.024-.978-.012a4.016 4.016 0 0 0-.742.06C8.03 1.007 7.113 1.33 6.32 1.903c-.677.483-1.285 1.153-1.79 1.968-.138.22-.264.443-.376.67-.113.225-.213.454-.298.682l.01.004c1.756-.042 3.332.782 4.385 2.177.01.012.02.024.03.036.04.05.08.1.12.15.848 1.003 1.804 1.428 2.944 1.235.593-.1.136-.69.136-1.32 0-.598-.1-.94-.278-1.234a4.24 4.24 0 0 0-.54-0.72c-.19-.215-.392-.42-.6-.612a4.24 4.24 0 0 0-.728-.548A4.24 4.24 0 0 0 10.86 3.756"/>
  </svg>
);

interface AuthFormProps {
  mode: 'signin' | 'signup';
}

const AuthForm: React.FC<AuthFormProps> = ({ mode }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [agreedToTerms, setAgreedToTerms] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [isSocialLoading, setIsSocialLoading] = useState<'google' | 'apple' | 'fingerprint' | null>(null);
  const { toast } = useToast();
  const router = useRouter();
  const auth = useAuth(); // Use AuthContext

  const handleMainSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (mode === 'signup' && !agreedToTerms) {
      toast({
        title: 'Terms and Conditions',
        description: 'You must agree to the terms and conditions to sign up.',
        variant: 'destructive',
      });
      return;
    }

    if (mode === 'signup' && password !== confirmPassword) {
      toast({
        title: 'Error',
        description: 'Passwords do not match.',
        variant: 'destructive',
      });
      return;
    }

    setIsLoading(true);
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1500));
    setIsLoading(false);

    if (Math.random() > 0.1) { // Simulate success
      auth.login(email); // Call login from AuthContext
      toast({
        title: mode === 'signin' ? 'Sign In Successful' : 'Sign Up Successful',
        description: mode === 'signin' ? 'Welcome back!' : 'Your account has been created.',
      });
      router.push('/dashboard'); // Redirect to dashboard
    } else { 
        toast({
            title: 'Authentication Failed',
            description: 'Invalid credentials or server error. Please try again.',
            variant: 'destructive',
        });
    }
  };

  const handleSocialLogin = async (provider: 'google' | 'apple' | 'fingerprint') => {
    setIsSocialLoading(provider);
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000));
    setIsSocialLoading(null);

    // Simulate success/error for social login
    if (Math.random() > 0.2) {
      // For social logins, we'd typically get email from the provider
      const mockEmail = provider === 'google' ? 'user@google.com' : provider === 'apple' ? 'user@apple.com' : 'user@passkey.com';
      auth.login(mockEmail); // Call login from AuthContext
      toast({
        title: `Sign In with ${provider.charAt(0).toUpperCase() + provider.slice(1)} Successful`,
        description: `Welcome to Enyi!`,
      });
      router.push('/dashboard'); // Redirect to dashboard
    } else {
      toast({
        title: `Sign In with ${provider.charAt(0).toUpperCase() + provider.slice(1)} Failed`,
        description: 'Could not sign in. Please try again or use another method.',
        variant: 'destructive',
      });
    }
  };

  return (
    <Card className="w-full max-w-md shadow-2xl border border-border/50">
      <CardHeader className="text-center">
        <div className="mx-auto mb-4 p-3 bg-primary/10 rounded-full inline-block">
            <ShieldCheck className="h-12 w-12 text-primary" />
        </div>
        <CardTitle className="text-3xl font-bold text-primary">
          {mode === 'signin' ? 'Welcome Back' : 'Create Account'}
        </CardTitle>
        <CardDescription className="text-lg">
          {mode === 'signin' ? 'Sign in to Enyi.' : 'Join Enyi today.'}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleMainSubmit} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="email">Email Address</Label>
            <Input
              id="email"
              type="email"
              placeholder="you@example.com"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              className="focus:ring-primary focus:border-primary text-base"
              disabled={isLoading || !!isSocialLoading}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="password">Password</Label>
            <Input
              id="password"
              type="password"
              placeholder="••••••••"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              className="focus:ring-primary focus:border-primary text-base"
              disabled={isLoading || !!isSocialLoading}
            />
          </div>
          {mode === 'signup' && (
            <>
              <div className="space-y-2">
                <Label htmlFor="confirmPassword">Confirm Password</Label>
                <Input
                  id="confirmPassword"
                  type="password"
                  placeholder="••••••••"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  required
                  className="focus:ring-primary focus:border-primary text-base"
                  disabled={isLoading || !!isSocialLoading}
                />
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox 
                  id="terms" 
                  checked={agreedToTerms}
                  onCheckedChange={(checked) => setAgreedToTerms(checked as boolean)}
                  disabled={isLoading || !!isSocialLoading}
                />
                <Label htmlFor="terms" className="text-sm font-normal text-muted-foreground">
                  I agree to the{' '}
                  <Link href="/terms" className="underline text-primary hover:text-primary/80">
                    Terms and Conditions
                  </Link>
                </Label>
              </div>
            </>
          )}
          <Button type="submit" className="w-full bg-primary hover:bg-primary/90 text-primary-foreground text-lg py-3 rounded-lg" disabled={isLoading || !!isSocialLoading || (mode === 'signup' && !agreedToTerms)}>
            {isLoading ? (
              <Loader2 className="mr-2 h-5 w-5 animate-spin" />
            ) : (
              mode === 'signin' ? 'Sign In' : 'Create Account'
            )}
          </Button>
        </form>

        <div className="my-6">
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <Separator />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">
                Or continue with
              </span>
            </div>
          </div>
        </div>

        <div className="space-y-3">
          <Button 
            variant="outline" 
            className="w-full text-base py-3 rounded-lg border-border hover:bg-accent/10" 
            onClick={() => handleSocialLogin('google')}
            disabled={isLoading || !!isSocialLoading}
          >
            {isSocialLoading === 'google' ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : <GoogleLogo />}
            Sign in with Google
          </Button>
          <Button 
            variant="outline" 
            className="w-full text-base py-3 rounded-lg border-border hover:bg-accent/10" 
            onClick={() => handleSocialLogin('apple')}
            disabled={isLoading || !!isSocialLoading}
          >
             {isSocialLoading === 'apple' ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : <AppleLogo />}
            Sign in with Apple
          </Button>
           <Button 
            variant="outline" 
            className="w-full text-base py-3 rounded-lg border-border hover:bg-accent/10" 
            onClick={() => handleSocialLogin('fingerprint')}
            disabled={isLoading || !!isSocialLoading}
          >
            {isSocialLoading === 'fingerprint' ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : <Fingerprint className="mr-2 h-5 w-5 text-primary" />}
            Sign in with Fingerprint/Passkey
          </Button>
        </div>
      </CardContent>
      <CardFooter className="flex flex-col items-center space-y-3 pt-6">
        <p className="text-sm text-muted-foreground">
          {mode === 'signin' ? "Don't have an account? " : 'Already have an account? '}
          <Link href={mode === 'signin' ? '/auth/sign-up' : '/auth/sign-in'} className="font-semibold text-accent hover:underline">
            {mode === 'signin' ? 'Sign Up' : 'Sign In'}
          </Link>
        </p>
        {mode === 'signin' && (
             <Link href="#" className="text-sm text-muted-foreground hover:text-accent hover:underline">
                Forgot password?
             </Link>
        )}
      </CardFooter>
    </Card>
  );
};

export default AuthForm;

